name: Release

on:
  push:
    branches:
      - 'release/*'  # Only trigger on release branches
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: quot-windows-x64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: quot-windows-arm64.exe
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: quot-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: quot-macos-arm64
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: quot-linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: quot-linux-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/quot.exe ${{ matrix.name }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/quot ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error

  test-binaries:
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary: quot-linux-x64
          - os: macos-latest
            binary: quot-macos-x64
          - os: windows-latest
            binary: quot-windows-x64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary }}

      - name: Test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ${{ matrix.binary }}
          echo "Hello World" | ./${{ matrix.binary }} --double

      - name: Test binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Hello World" | ./${{ matrix.binary }} --double

  create-release:
    needs: [build, test-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from branch name
        id: extract_version
        run: |
          if [[ "${{ github.ref_name }}" =~ ^release/(.+)$ ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
            echo "Extracted version: ${VERSION}"
          else
            echo "Error: Could not extract version from branch name: ${{ github.ref_name }}"
            exit 1
          fi

      - name: Create and push release tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          VERSION="${{ steps.extract_version.outputs.version }}"
          RELEASE_BRANCH="release/$VERSION"
          echo "Processing tag: $TAG_NAME"
          echo "Processing release branch: $RELEASE_BRANCH"
          
          # Check if tag exists locally and delete it
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Local tag $TAG_NAME exists, deleting it..."
            git tag -d "$TAG_NAME"
          fi
          
          # Check if tag exists on remote and delete it
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Remote tag $TAG_NAME exists, deleting it..."
            git push origin ":refs/tags/$TAG_NAME"
          fi
          
          # Check if release branch exists on remote and delete it (excluding current branch)
          if git ls-remote --heads origin | grep -q "refs/heads/${RELEASE_BRANCH}$"; then
            echo "Remote release branch $RELEASE_BRANCH exists, will be cleaned up after merge..."
          fi
          
          # Create and push the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "Created and pushed tag: $TAG_NAME"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "quot-*" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: Release ${{ steps.extract_version.outputs.tag_name }}
          draft: false
          prerelease: false
          files: release-assets/*
          body: |
            ## What's Changed
            
            * Cross-platform release for Windows, macOS, and Linux
            * Supports both x64 and ARM64 architectures
            * Available on crates.io for easy installation
            
            ## Installation
            
            ### Using Cargo (Recommended)
            
            ```bash
            cargo install quot
            ```
            
            ### Pre-built Binaries
            
            Download the appropriate binary for your platform from the assets below:
            
            ### Windows
            - `quot-windows-x64.exe` - Windows 64-bit (Intel/AMD)
            - `quot-windows-arm64.exe` - Windows ARM64
            
            ### macOS
            - `quot-macos-x64` - macOS Intel (x64)
            - `quot-macos-arm64` - macOS Apple Silicon (M1/M2)
            
            ### Linux
            - `quot-linux-x64` - Linux 64-bit (Intel/AMD)
            - `quot-linux-arm64` - Linux ARM64
            
            ## Usage
            
            ```bash
            # Interactive mode
            ./quot
            
            # From file
            ./quot input.txt
            
            # From pipe with different quote styles
            echo "Hello World" | ./quot --single
            cat file.txt | ./quot --raw
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-homebrew:
    name: Publish to Homebrew
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from branch name
      id: extract_version
      run: |
        if [[ "${{ github.ref_name }}" =~ ^release/(.+)$ ]]; then
          VERSION=${BASH_REMATCH[1]}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"
        else
          echo "Error: Could not extract version from branch name: ${{ github.ref_name }}"
          exit 1
        fi

    - name: Generate Homebrew formula
      id: homebrew_formula
      run: |
        VERSION="${{ steps.extract_version.outputs.version }}"
        TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
        
        # Wait a moment for the release assets to be available
        sleep 30
        
        # Download the macOS binaries to get the SHA256
        echo "Downloading macOS x64 binary..."
        curl -L -f --retry 3 --retry-delay 10 -o quot-macos-x64 "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/quot-macos-x64"
        MACOS_X64_SHA256=$(sha256sum quot-macos-x64 | cut -d' ' -f1)
        echo "macOS x64 SHA256: ${MACOS_X64_SHA256}"
        
        echo "Downloading macOS ARM64 binary..."
        curl -L -f --retry 3 --retry-delay 10 -o quot-macos-arm64 "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/quot-macos-arm64"
        MACOS_ARM64_SHA256=$(sha256sum quot-macos-arm64 | cut -d' ' -f1)
        echo "macOS ARM64 SHA256: ${MACOS_ARM64_SHA256}"
        
        # Generate Homebrew formula
        cat > quot.rb << EOF
        class Quot < Formula
          desc "A fast and flexible command-line tool that converts text input into escaped string literals"
          homepage "https://github.com/samwisely75/quot"
          version "${VERSION}"
          license "Apache-2.0"

          on_macos do
            if Hardware::CPU.intel?
              url "https://github.com/samwisely75/quot/releases/download/${TAG_NAME}/quot-macos-x64"
              sha256 "${MACOS_X64_SHA256}"

              def install
                bin.install "quot-macos-x64" => "quot"
              end
            end
            if Hardware::CPU.arm?
              url "https://github.com/samwisely75/quot/releases/download/${TAG_NAME}/quot-macos-arm64"
              sha256 "${MACOS_ARM64_SHA256}"

              def install
                bin.install "quot-macos-arm64" => "quot"
              end
            end
          end

          test do
            output = shell_output("#{bin}/quot --version 2>&1").strip
            assert_match version.to_s, output
            assert_equal "\"Hello World\\n\"", shell_output("echo 'Hello World' | #{bin}/quot").strip
          end
        end
        EOF
        
        echo "Generated Homebrew formula:"
        cat quot.rb

    - name: Setup homebrew tap repository
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Clone or create the homebrew tap repository
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        TAP_REPO="https://x-access-token:${HOMEBREW_TAP_TOKEN}@github.com/samwisely75/homebrew-tap.git"
        
        if git ls-remote "$TAP_REPO" &>/dev/null; then
          echo "Tap repository exists, cloning..."
          git clone "$TAP_REPO" homebrew-tap
        else
          echo "Creating new tap repository..."
          mkdir homebrew-tap
          cd homebrew-tap
          git init
          echo "# Homebrew Tap for samwisely75" > README.md
          echo "" >> README.md
          echo "This is a Homebrew tap for samwisely75's tools." >> README.md
          echo "" >> README.md
          echo "## Installation" >> README.md
          echo "" >> README.md
          echo "\`\`\`bash" >> README.md
          echo "brew tap samwisely75/tap" >> README.md
          echo "brew install quot" >> README.md
          echo "\`\`\`" >> README.md
          mkdir -p Formula
          git add README.md Formula/
          git commit -m "Initial tap setup"
          git branch -M main
          git remote add origin "$TAP_REPO"
        fi

    - name: Update formula and create PR
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        cd homebrew-tap
        
        # Create Formula directory if it doesn't exist
        mkdir -p Formula
        
        # Copy the generated formula
        cp ../quot.rb Formula/quot.rb
        
        # Check if there are changes
        if git diff --quiet Formula/quot.rb 2>/dev/null; then
          echo "No changes to formula, skipping update"
          exit 0
        fi
        
        # Create a new branch for the update
        BRANCH_NAME="update-quot-${{ steps.extract_version.outputs.version }}"
        git checkout -b "$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"
        
        # Add and commit changes
        git add Formula/quot.rb
        git commit -m "Update quot to v${{ steps.extract_version.outputs.version }}"
        
        # Push the branch
        git push origin "$BRANCH_NAME"
        
        echo "✅ Successfully updated Homebrew formula to v${{ steps.extract_version.outputs.version }}"
        echo "📝 Formula available at: https://github.com/samwisely75/homebrew-tap/blob/$BRANCH_NAME/Formula/quot.rb"
        echo ""
        echo "To install with Homebrew:"
        echo "  brew tap samwisely75/tap"
        echo "  brew install quot"

  merge-to-main:
    name: Merge Release to Main
    runs-on: ubuntu-latest
    needs: [create-release, publish-homebrew, build, test-binaries]
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for merge
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Merge release to main
      run: |
        # Determine the source branch
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # If triggered by a tag, find the branch that contains this tag
          SOURCE_BRANCH=$(git branch -r --contains ${{ github.sha }} | grep -v 'HEAD' | head -1 | sed 's/origin\///' | xargs)
          echo "Tag triggered: merging from branch $SOURCE_BRANCH"
        else
          # If triggered by a release branch push
          SOURCE_BRANCH=${GITHUB_REF#refs/heads/}
          echo "Branch triggered: merging from $SOURCE_BRANCH"
        fi
        
        # Switch to main and merge
        git checkout main
        git pull origin main
        
        # Check if the release branch/tag is already merged
        if git merge-base --is-ancestor ${{ github.sha }} HEAD; then
          echo "Changes already merged into main"
        else
          echo "Merging $SOURCE_BRANCH to main..."
          git merge --no-ff ${{ github.sha }} -m "Merge release ${{ github.ref_name }} to main - All release artifacts and tests passed"
          
          # Push to main
          git push origin main
          echo "✅ Successfully merged release to main"
        fi

    - name: Update develop branch
      run: |
        # Also merge any release changes back to develop to keep it up to date
        git checkout develop
        git pull origin develop
        
        # Check if already merged
        if git merge-base --is-ancestor ${{ github.sha }} HEAD; then
          echo "Changes already in develop"
        else
          echo "Merging release changes back to develop..."
          git merge --no-ff ${{ github.sha }} -m "Merge release ${{ github.ref_name }} back to develop"
          git push origin develop
          echo "✅ Successfully updated develop branch"
        fi

    - name: Clean up release branch
      if: startsWith(github.ref, 'refs/heads/release/')
      run: |
        # Delete the release branch after successful merge
        RELEASE_BRANCH=${GITHUB_REF#refs/heads/}
        echo "Deleting release branch: $RELEASE_BRANCH"
        
        # Debug: Show what branches exist
        echo "Local branches:"
        git branch -a | grep "$RELEASE_BRANCH" || echo "No local branches found"
        
        echo "Remote branches:"
        git ls-remote --heads origin | grep "$RELEASE_BRANCH" || echo "No remote branches found"
        
        # Try different deletion approaches
        if git ls-remote --heads origin | grep -q "refs/heads/$RELEASE_BRANCH"; then
          echo "Attempting to delete remote branch: refs/heads/$RELEASE_BRANCH"
          git push origin --delete "$RELEASE_BRANCH" || {
            echo "Standard delete failed, trying alternative syntax..."
            git push origin ":refs/heads/$RELEASE_BRANCH" || {
              echo "⚠️  Could not delete remote branch, may already be deleted"
            }
          }
        else
          echo "Remote branch $RELEASE_BRANCH not found, may already be deleted"
        fi
        
        echo "✅ Cleaned up release branch"
