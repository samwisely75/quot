name: Release

on:
  push:
    branches:
      - 'release/*'  # Only trigger on release branches
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: quot-windows-x64.exe
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: quot-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: quot-macos-arm64
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: quot-linux-x64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/quot.exe ${{ matrix.name }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/quot ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error

  build-packages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: quot-linux-x64
          path: binaries/

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm alien fakeroot

      - name: Setup package structure
        run: |
          chmod +x binaries/quot-linux-x64
          
          # Create directory structure for packaging
          mkdir -p packaging/usr/bin
          mkdir -p packaging/usr/share/man/man1
          mkdir -p packaging/DEBIAN
          mkdir -p packaging/usr/share/doc/quot
          
          # Copy binary
          cp binaries/quot-linux-x64 packaging/usr/bin/quot
          
          # Create basic man page
          cat > packaging/usr/share/man/man1/quot.1 << 'EOF'
          .TH QUOT 1 "$(date +'%B %Y')" "quot $(grep '^version' Cargo.toml | cut -d'"' -f2)" "User Commands"
          .SH NAME
          quot \- A fast and flexible command-line tool that converts text input into escaped string literals
          .SH SYNOPSIS
          .B quot
          [\fIOPTIONS\fR] [\fIFILE\fR]
          .SH DESCRIPTION
          \fBquot\fP converts input text to escaped string literals in various formats.
          .SH OPTIONS
          .TP
          \fB\-m, \-\-format\fR \fIFORMAT\fR
          Quote format to use: double, single, or raw (default: double)
          .TP
          \fB\-c, \-\-clipboard\fR
          Read text from system clipboard
          .TP
          \fB\-f, \-\-file\fR \fIFILE\fR
          File to read from
          .TP
          \fB\-h, \-\-help\fR
          Show help message
          .TP
          \fB\-V, \-\-version\fR
          Show version information
          .SH DESCRIPTION
          \fBquot\fP converts input text to escaped string literals in various formats.
          If no file, clipboard flag, or piped input is provided, enters interactive editor mode.
          .SH EXAMPLES
          .TP
          echo "Hello World" | quot
          .TP
          quot input.txt
          .TP
          quot --format single < file.txt
          .SH AUTHOR
          Written by Satoshi Iizuka.
          .SH REPORTING BUGS
          Report bugs to: https://github.com/samwisely75/quot/issues
          EOF
          
          # Compress man page
          gzip packaging/usr/share/man/man1/quot.1
          
          # Create copyright file
          cp LICENSE packaging/usr/share/doc/quot/copyright
          
          # Create changelog
          echo "quot ($(grep '^version' Cargo.toml | cut -d'"' -f2)) stable; urgency=medium" > packaging/usr/share/doc/quot/changelog.Debian
          echo "" >> packaging/usr/share/doc/quot/changelog.Debian
          echo "  * Release version $(grep '^version' Cargo.toml | cut -d'"' -f2)" >> packaging/usr/share/doc/quot/changelog.Debian
          echo "" >> packaging/usr/share/doc/quot/changelog.Debian
          echo " -- Satoshi Iizuka <satoshi.iizuka@elastic.co>  $(date -R)" >> packaging/usr/share/doc/quot/changelog.Debian
          
          # Compress changelog
          gzip packaging/usr/share/doc/quot/changelog.Debian

      - name: Create DEB package
        run: |
          VERSION=$(grep '^version' Cargo.toml | cut -d'"' -f2)
          
          # Create DEBIAN control file
          cat > packaging/DEBIAN/control << EOF
          Package: quot
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6 (>= 2.17)
          Maintainer: Satoshi Iizuka <satoshi.iizuka@elastic.co>
          Description: A fast and flexible command-line tool for text escaping
           quot converts input text into escaped string literals in various formats.
           It supports double quotes, single quotes, and raw strings (Rust style).
           The tool can read from files, stdin, or clipboard and is useful for
           developers who need to quickly escape text for use in code.
          Homepage: https://github.com/samwisely75/quot
          EOF
          
          # Build DEB package
          fakeroot dpkg-deb --build packaging quot_${VERSION}_amd64.deb
          
          # Verify package
          dpkg-deb --info quot_${VERSION}_amd64.deb
          dpkg-deb --contents quot_${VERSION}_amd64.deb

      - name: Create RPM package
        run: |
          VERSION=$(grep '^version' Cargo.toml | cut -d'"' -f2)
          
          # Create RPM build directories
          mkdir -p rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create RPM spec file
          cat > rpmbuild/SPECS/quot.spec << EOF
          Name:           quot
          Version:        ${VERSION}
          Release:        1%{?dist}
          Summary:        A fast and flexible command-line tool for text escaping
          
          License:        Apache-2.0
          URL:            https://github.com/samwisely75/quot
          Source0:        %{name}-%{version}.tar.gz
          
          BuildArch:      x86_64
          Requires:       glibc >= 2.17
          
          %description
          quot converts input text into escaped string literals in various formats.
          It supports double quotes, single quotes, and raw strings (Rust style).
          The tool can read from files, stdin, or clipboard and is useful for
          developers who need to quickly escape text for use in code.
          
          %prep
          # No prep needed for binary package
          
          %build
          # No build needed for binary package
          
          %install
          rm -rf %{buildroot}
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/man/man1
          mkdir -p %{buildroot}/usr/share/doc/quot
          
          cp %{_topdir}/../binaries/quot-linux-x64 %{buildroot}/usr/bin/quot
          cp %{_topdir}/../packaging/usr/share/man/man1/quot.1.gz %{buildroot}/usr/share/man/man1/
          cp %{_topdir}/../packaging/usr/share/doc/quot/copyright %{buildroot}/usr/share/doc/quot/
          
          %files
          %{_bindir}/quot
          %{_mandir}/man1/quot.1.gz
          %doc %{_docdir}/quot/copyright
          
          %changelog
          * $(date +'%a %b %d %Y') Satoshi Iizuka <satoshi.iizuka@elastic.co> - ${VERSION}-1
          - Release version ${VERSION}
          EOF
          
          # Build RPM package
          rpmbuild --define "_topdir $(pwd)/rpmbuild" -bb rpmbuild/SPECS/quot.spec
          
          # Copy RPM to current directory
          find rpmbuild/RPMS -name "*.rpm" -exec cp {} quot-${VERSION}-1.x86_64.rpm \;
          
          # Verify package
          rpm -qip quot-${VERSION}-1.x86_64.rpm
          rpm -qlp quot-${VERSION}-1.x86_64.rpm

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: quot-deb-package
          path: "*.deb"
          if-no-files-found: error

      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: quot-rpm-package
          path: "*.rpm"
          if-no-files-found: error

  test-binaries:
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary: quot-linux-x64
          - os: macos-latest
            binary: quot-macos-x64
          - os: windows-latest
            binary: quot-windows-x64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary }}

      - name: Test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ${{ matrix.binary }}
          echo "Hello World" | ./${{ matrix.binary }} --format double

      - name: Test binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Hello World" | ./${{ matrix.binary }} --format double

  create-release:
    needs: [build, build-packages, test-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from branch name
        id: extract_version
        run: |
          if [[ "${{ github.ref_name }}" =~ ^release/(.+)$ ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
            echo "Extracted version: ${VERSION}"
          else
            echo "Error: Could not extract version from branch name: ${{ github.ref_name }}"
            exit 1
          fi

      - name: Create and push release tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          VERSION="${{ steps.extract_version.outputs.version }}"
          RELEASE_BRANCH="release/$VERSION"
          echo "Processing tag: $TAG_NAME"
          echo "Processing release branch: $RELEASE_BRANCH"
          
          # Check if tag exists locally and delete it
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Local tag $TAG_NAME exists, deleting it..."
            git tag -d "$TAG_NAME"
          fi
          
          # Check if tag exists on remote and delete it
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Remote tag $TAG_NAME exists, deleting it..."
            git push origin ":refs/tags/$TAG_NAME"
          fi
          
          # Check if release branch exists on remote and delete it (excluding current branch)
          if git ls-remote --heads origin | grep -q "refs/heads/${RELEASE_BRANCH}$"; then
            echo "Remote release branch $RELEASE_BRANCH exists, will be cleaned up after merge..."
          fi
          
          # Create and push the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "Created and pushed tag: $TAG_NAME"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "quot-*" -exec cp {} release-assets/ \;
          find artifacts -name "*.deb" -exec cp {} release-assets/ \;
          find artifacts -name "*.rpm" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: Release ${{ steps.extract_version.outputs.tag_name }}
          draft: false
          prerelease: false
          files: release-assets/*
          body: |
            ## What's Changed
            
            * Cross-platform release for Windows, macOS, and Linux
            * Linux packages available in DEB and RPM formats
            * Available on crates.io and Homebrew for easy installation
            
            ## Installation
            
            ### Using Cargo (Recommended)
            
            ```bash
            cargo install quot
            ```
            
            ### Using Homebrew (macOS)
            
            ```bash
            brew tap samwisely75/tap
            brew install quot
            ```
            
            ### Using Package Managers (Linux)
            
            **Debian/Ubuntu (.deb):**
            ```bash
            # Download the .deb file from assets below, then:
            sudo dpkg -i quot_*_amd64.deb
            ```
            
            **RHEL/CentOS/Fedora (.rpm):**
            ```bash
            # Download the .rpm file from assets below, then:
            sudo rpm -ivh quot-*-1.x86_64.rpm
            ```
            
            ### Pre-built Binaries
            
            Download the appropriate binary for your platform from the assets below:
            
            ### Windows
            - `quot-windows-x64.exe` - Windows 64-bit (Intel/AMD)
            
            ### macOS
            - `quot-macos-x64` - macOS Intel (x64)
            - `quot-macos-arm64` - macOS Apple Silicon (M1/M2)
            
            ### Linux
            - `quot-linux-x64` - Linux 64-bit (Intel/AMD)
            - `quot_*_amd64.deb` - Debian/Ubuntu package
            - `quot-*-1.x86_64.rpm` - RHEL/CentOS/Fedora package
            
            ## Usage
            
            ```bash
            # Interactive mode
            ./quot
            
            # From file
            ./quot input.txt
            
            # From pipe with different quote styles
            echo "Hello World" | ./quot --format single
            cat file.txt | ./quot --format raw
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-homebrew:
    name: Publish to Homebrew
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from branch name
      id: extract_version
      run: |
        if [[ "${{ github.ref_name }}" =~ ^release/(.+)$ ]]; then
          VERSION=${BASH_REMATCH[1]}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"
        else
          echo "Error: Could not extract version from branch name: ${{ github.ref_name }}"
          exit 1
        fi

    - name: Generate Homebrew formula
      id: homebrew_formula
      run: |
        VERSION="${{ steps.extract_version.outputs.version }}"
        TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
        
        # Wait a moment for the release assets to be available
        sleep 30
        
        # Download the macOS binaries to get the SHA256
        echo "Downloading macOS x64 binary..."
        curl -L -f --retry 3 --retry-delay 10 -o quot-macos-x64 "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/quot-macos-x64"
        MACOS_X64_SHA256=$(sha256sum quot-macos-x64 | cut -d' ' -f1)
        echo "macOS x64 SHA256: ${MACOS_X64_SHA256}"
        
        echo "Downloading macOS ARM64 binary..."
        curl -L -f --retry 3 --retry-delay 10 -o quot-macos-arm64 "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/quot-macos-arm64"
        MACOS_ARM64_SHA256=$(sha256sum quot-macos-arm64 | cut -d' ' -f1)
        echo "macOS ARM64 SHA256: ${MACOS_ARM64_SHA256}"
        
        # Generate Homebrew formula
        cat > quot.rb << EOF
        class Quot < Formula
          desc "A fast and flexible command-line tool that converts text input into escaped string literals"
          homepage "https://github.com/samwisely75/quot"
          version "${VERSION}"
          license "Apache-2.0"

          on_macos do
            if Hardware::CPU.intel?
              url "https://github.com/samwisely75/quot/releases/download/${TAG_NAME}/quot-macos-x64"
              sha256 "${MACOS_X64_SHA256}"

              def install
                bin.install "quot-macos-x64" => "quot"
              end
            end
            if Hardware::CPU.arm?
              url "https://github.com/samwisely75/quot/releases/download/${TAG_NAME}/quot-macos-arm64"
              sha256 "${MACOS_ARM64_SHA256}"

              def install
                bin.install "quot-macos-arm64" => "quot"
              end
            end
          end

          test do
            output = shell_output("#{bin}/quot --version 2>&1").strip
            assert_match version.to_s, output
            assert_equal "\"Hello World\\n\"", shell_output("echo 'Hello World' | #{bin}/quot --format double").strip
          end
        end
        EOF
        
        echo "Generated Homebrew formula:"
        cat quot.rb

    - name: Setup homebrew tap repository
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Clone or create the homebrew tap repository
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        TAP_REPO="https://x-access-token:${HOMEBREW_TAP_TOKEN}@github.com/samwisely75/homebrew-tap.git"
        
        if git ls-remote "$TAP_REPO" &>/dev/null; then
          echo "Tap repository exists, cloning..."
          git clone "$TAP_REPO" homebrew-tap
        else
          echo "Creating new tap repository..."
          mkdir homebrew-tap
          cd homebrew-tap
          git init
          echo "# Homebrew Tap for samwisely75" > README.md
          echo "" >> README.md
          echo "This is a Homebrew tap for samwisely75's tools." >> README.md
          echo "" >> README.md
          echo "## Installation" >> README.md
          echo "" >> README.md
          echo "\`\`\`bash" >> README.md
          echo "brew tap samwisely75/tap" >> README.md
          echo "brew install quot" >> README.md
          echo "\`\`\`" >> README.md
          mkdir -p Formula
          git add README.md Formula/
          git commit -m "Initial tap setup"
          git branch -M main
          git remote add origin "$TAP_REPO"
        fi

    - name: Update formula and create PR
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        cd homebrew-tap
        
        # Create Formula directory if it doesn't exist
        mkdir -p Formula
        
        # Copy the generated formula
        cp ../quot.rb Formula/quot.rb
        
        # Check if there are changes
        if git diff --quiet Formula/quot.rb 2>/dev/null; then
          echo "No changes to formula, skipping update"
          exit 0
        fi
        
        # Create a new branch for the update
        BRANCH_NAME="update-quot-${{ steps.extract_version.outputs.version }}"
        git checkout -b "$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"
        
        # Add and commit changes
        git add Formula/quot.rb
        git commit -m "Update quot to v${{ steps.extract_version.outputs.version }}"
        
        # Push the branch
        git push origin "$BRANCH_NAME"
        
        echo "✅ Successfully updated Homebrew formula to v${{ steps.extract_version.outputs.version }}"
        echo "📝 Formula available at: https://github.com/samwisely75/homebrew-tap/blob/$BRANCH_NAME/Formula/quot.rb"
        echo ""
        echo "To install with Homebrew:"
        echo "  brew tap samwisely75/tap"
        echo "  brew install quot"

  merge-to-main:
    name: Merge Release to Main
    runs-on: ubuntu-latest
    needs: [create-release, publish-homebrew, build, build-packages, test-binaries]
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for merge
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Merge release to main
      run: |
        # Determine the source branch
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # If triggered by a tag, find the branch that contains this tag
          SOURCE_BRANCH=$(git branch -r --contains ${{ github.sha }} | grep -v 'HEAD' | head -1 | sed 's/origin\///' | xargs)
          echo "Tag triggered: merging from branch $SOURCE_BRANCH"
        else
          # If triggered by a release branch push
          SOURCE_BRANCH=${GITHUB_REF#refs/heads/}
          echo "Branch triggered: merging from $SOURCE_BRANCH"
        fi
        
        # Switch to main and merge
        git checkout main
        git pull origin main
        
        # Check if the release branch/tag is already merged
        if git merge-base --is-ancestor ${{ github.sha }} HEAD; then
          echo "Changes already merged into main"
        else
          echo "Merging $SOURCE_BRANCH to main..."
          git merge --no-ff ${{ github.sha }} -m "Merge release ${{ github.ref_name }} to main - All release artifacts and tests passed"
          
          # Push to main
          git push origin main
          echo "✅ Successfully merged release to main"
        fi

    - name: Update develop branch
      run: |
        # Also merge any release changes back to develop to keep it up to date
        git checkout develop
        git pull origin develop
        
        # Check if already merged
        if git merge-base --is-ancestor ${{ github.sha }} HEAD; then
          echo "Changes already in develop"
        else
          echo "Merging release changes back to develop..."
          git merge --no-ff ${{ github.sha }} -m "Merge release ${{ github.ref_name }} back to develop"
          git push origin develop
          echo "✅ Successfully updated develop branch"
        fi

    - name: Clean up release branch
      if: startsWith(github.ref, 'refs/heads/release/')
      run: |
        # Delete the release branch after successful merge
        RELEASE_BRANCH=${GITHUB_REF#refs/heads/}
        echo "Deleting release branch: $RELEASE_BRANCH"
        
        # Debug: Show what branches exist
        echo "Local branches:"
        git branch -a | grep "$RELEASE_BRANCH" || echo "No local branches found"
        
        echo "Remote branches:"
        git ls-remote --heads origin | grep "$RELEASE_BRANCH" || echo "No remote branches found"
        
        # Try different deletion approaches
        if git ls-remote --heads origin | grep -q "refs/heads/$RELEASE_BRANCH"; then
          echo "Attempting to delete remote branch: refs/heads/$RELEASE_BRANCH"
          git push origin --delete "$RELEASE_BRANCH" || {
            echo "Standard delete failed, trying alternative syntax..."
            git push origin ":refs/heads/$RELEASE_BRANCH" || {
              echo "⚠️  Could not delete remote branch, may already be deleted"
            }
          }
        else
          echo "Remote branch $RELEASE_BRANCH not found, may already be deleted"
        fi
        
        echo "✅ Cleaned up release branch"
