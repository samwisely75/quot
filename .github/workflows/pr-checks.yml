name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  pr-info:
    runs-on: ubuntu-latest
    steps:
      - name: PR Info
        run: |
          echo "Pull Request Number - ${{ github.event.number }}"
          echo "Pull Request Title - ${{ github.event.pull_request.title }}"
          echo "Pull Request Author - ${{ github.event.pull_request.user.login }}"
          echo "Pull Request Base - ${{ github.event.pull_request.base.ref }}"
          echo "Pull Request Head - ${{ github.event.pull_request.head.ref }}"

  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      workflows: ${{ steps.changes.outputs.workflows }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            rust:
              - 'src/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
            workflows:
              - '.github/**'
            docs:
              - 'README.md'
              - '*.md'

  quick-tests:
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Quick format check
        run: cargo fmt -- --check

      - name: Quick clippy check
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Quick test
        run: cargo test --lib

  comprehensive-tests:
    needs: [changes, quick-tests]
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run all tests with coverage
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml --output-dir ./coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage/

  build-check:
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build for target
        run: cargo build --release --target ${{ matrix.target }}

  docs-check:
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check documentation
        run: cargo doc --no-deps --all-features

      - name: Test documentation examples
        run: cargo test --doc
