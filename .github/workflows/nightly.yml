name: Nightly Builds and Benchmarks

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  nightly-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust Nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Test with nightly Rust
        run: cargo +nightly test --verbose
        continue-on-error: true

      - name: Clippy with nightly Rust
        run: cargo +nightly clippy --all-targets --all-features -- -D warnings
        continue-on-error: true

  benchmarks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          # Create simple performance test
          echo "Testing basic performance..."
          time echo "Hello World" | ./target/release/quot || true
          
          # Build release first if needed
          cargo build --release
          
          # Time various operations
          echo "Performance test results:" > benchmark-results.txt
          echo "==========================" >> benchmark-results.txt
          echo "" >> benchmark-results.txt
          
          echo "Basic string escaping:" >> benchmark-results.txt
          { time echo "Hello \"World\" with\nnewlines\tand\ttabs" | ./target/release/quot; } 2>> benchmark-results.txt
          
          echo "" >> benchmark-results.txt
          echo "Large file processing:" >> benchmark-results.txt
          # Create a test file with various content
          seq 1 1000 | sed 's/.*/ Line & with "quotes" and \n newlines/' > large-test.txt
          { time ./target/release/quot large-test.txt; } 2>> benchmark-results.txt
          
          echo "" >> benchmark-results.txt
          echo "Clipboard mode test:" >> benchmark-results.txt
          { time ./target/release/quot --clipboard || echo "Clipboard test skipped (no display)"; } 2>> benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.txt

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-geiger

      - name: Run security audit
        run: cargo audit --json > audit-results.json || true

      - name: Run cargo-geiger (unsafe code detection)
        run: cargo geiger --output-format json > geiger-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            audit-results.json
            geiger-results.json
